[{"content":"It has been a week since I configured and deployed my Blog with Hugo, I have notpost anyhting since then. Then Today I have experience a lot of trouble in the workflow for posting. That means, the new skill which is not training is inmediatly forgotten. Then lest write this mini guide to get back and remember the posting worflow in Hugo.\n1. Create a new Markdown file with Hugo The Hugo post should be write locally using a Markdown editor. To create the new file is important to enter into your repository. Mine is called CodeNotes\nDirectory: Github/blog/CodeNotes Github is the folder where I store all my Github repositories blog is a new folder where I will test every Hugo Blog I will create to learn. In this case the only blog is called CodeNotes. CodeNotes contains the HugoBlog, this is the place we will be working. Lets go to the CodeNote folder and create the new entry:\ncd blog/Codenotes hugo new content/post/2022/hugo_post_workflow.md The command hugo new will create a markdown file in content/post/2022/file.md This command is important because the new file will create markdown file with the following front matter. The basic structure includes the title:, date, and draft. Therefore, the following infor should be added.\n--- title: \u0026#34;Hugo workflow for posting a blog\u0026#34; date: 2022-07-03T09:45:32-05:00 draft: true author: \u0026#34;Jesus Capistran\u0026#34; tags: [\u0026#34;python\u0026#34;, \u0026#34;hugo\u0026#34;] --- 3. Preview your file in Hugo Server Now is time to preview the file you are writing. This can be achieved by using the command Hugo Server. This command will create a local server to explore how your post its going to look once the html files are deployed.\nGo to CodeNotes folder write: Hugo server Preview yor file by opening the link generated link: http://localhost:1313/\n(base) ➜ Github cd blog/code_notes (base) ➜ code_notes git:(main) ✗ hugo server Start building sites … hugo v0.101.0+extended darwin/amd64 BuildDate=unknown | EN -------------------+----- Pages | 22 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 5 Sitemaps | 1 Cleaned | 0 Built in 124 ms Watching for changes in /Users/capis/Documents/Github/blog/code_notes/{archetypes,content,data,layouts,static,themes} Watching for config changes in /Users/capis/Documents/Github/blog/code_notes/config.yml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 4. Create the public folder(HTML files) Once you are satisfied with the local results for your bew blog post, is time to convert the markdown files into html. For this task there is no other think to do than write Hugo in ther CodeNotes folder.\nLet\u0026rsquo;s do it:\nStart building sites … hugo v0.101.0+extended darwin/amd64 BuildDate=unknown | EN -------------------+----- Pages | 25 Paginator pages | 0 Non-page files | 0 Static files | 0 Processed images | 0 Aliases | 6 Sitemaps | 1 Cleaned | 0 Total in 240 ms (base) ➜ code_notes git:(main) ✗ After using Hugo command the html are generated in the public folder CodeNotes/Public. Is this folder which contains the whole Hugo Blog (html pages) which form your statis site.\nAs you can see, every time you create a blog post, all the html sites should be generated. Let\u0026rsquo;s deplot the Public folder into Github Pages.\n5. Deploy into Github Pages The new post was created locally, next we preview it using Hugo server, and we create the html files using hugo, now is time to deploy the Public folder into github pages.\nNote: Remember the Public folder is linked to a second repository in github. That means the first repository called CodeNotes will contain the markdown files and the second repository will contain the html files we are generating in the public folder.\n(base) ➜ code_notes git:(main) ✗ cd public (base) ➜ public git:(main) ✗ git add . (base) ➜ public git:(main) ✗ git commit -m \u0026#34;post July 03, Hugo posting workflow\u0026#34; [main 17dc849] post July 03, Hugo posting workflow 23 files changed, 179 insertions(+), 84 deletions(-) rewrite archives/index.html (66%) rewrite index.html (83%) rewrite index.json (96%) create mode 100644 post/2022/hugo_post_workflow/index.html rewrite post/hugo_tutorial/index.html (76%) rewrite post/index.html (63%) rewrite post/welcome_code_notes/index.html (74%) create mode 100644 tags/hugo/index.html create mode 100644 tags/hugo/index.xml create mode 100644 tags/hugo/page/1/index.html (base) ➜ public git:(main) That\u0026rsquo;s all, now you can wait aproximately 1 minute and check your online webpage:\nThis is mine: http://jesuscapistran.github.io/ If you want to check How to deploy a new Hugo Site into Github Pages follow the video of my second post: Deplot a Hugo blog in Github\n","permalink":"https://jesuscapistran.github.io/post/2022/hugo_post_workflow/","summary":"It has been a week since I configured and deployed my Blog with Hugo, I have notpost anyhting since then. Then Today I have experience a lot of trouble in the workflow for posting. That means, the new skill which is not training is inmediatly forgotten. Then lest write this mini guide to get back and remember the posting worflow in Hugo.\n1. Create a new Markdown file with Hugo The Hugo post should be write locally using a Markdown editor.","title":"Hugo workflow for posting a blog"},{"content":"July 02, 2022 Filter data in python with high order functions This project (Platzi) is to learn How to filter data from a list of dictionaries. The goal is to use the python high order functions filter() and map() to achieve the task. Note: You will require python \u0026gt; v3.9 to finish the 100% of the examples. However if you have only python 3 you can achieve the 90%. Don\u0026rsquo;t worry, let\u0026rsquo;s practice.\nThe filter( ) , map ( ), and reduce ( ) functions simplifies the process of working with lists and dictionaries.\nList of dictionaries This is the list of dictionaries provided by Platzi where we will perform some filter tasks. Take a look to the name of the dictionary DATA is capitalized, this means the list of dictionary will be a constant along the program.\nDATA = [ { \u0026#39;name\u0026#39;: \u0026#39;Facundo\u0026#39;, \u0026#39;age\u0026#39;: 72, \u0026#39;organization\u0026#39;: \u0026#39;Platzi\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Technical Coach\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Luisana\u0026#39;, \u0026#39;age\u0026#39;: 33, \u0026#39;organization\u0026#39;: \u0026#39;Globant\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;UX Designer\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;javascript\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Héctor\u0026#39;, \u0026#39;age\u0026#39;: 19, \u0026#39;organization\u0026#39;: \u0026#39;Platzi\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Associate\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;ruby\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Gabriel\u0026#39;, \u0026#39;age\u0026#39;: 20, \u0026#39;organization\u0026#39;: \u0026#39;Platzi\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Associate\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;javascript\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Isabella\u0026#39;, \u0026#39;age\u0026#39;: 30, \u0026#39;organization\u0026#39;: \u0026#39;Platzi\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;QA Manager\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;java\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Karo\u0026#39;, \u0026#39;age\u0026#39;: 23, \u0026#39;organization\u0026#39;: \u0026#39;Everis\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Backend Developer\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Ariel\u0026#39;, \u0026#39;age\u0026#39;: 32, \u0026#39;organization\u0026#39;: \u0026#39;Rappi\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Support\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Juan\u0026#39;, \u0026#39;age\u0026#39;: 17, \u0026#39;organization\u0026#39;: \u0026#39;\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Student\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;go\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Pablo\u0026#39;, \u0026#39;age\u0026#39;: 32, \u0026#39;organization\u0026#39;: \u0026#39;Master\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Human Resources Manager\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, }, { \u0026#39;name\u0026#39;: \u0026#39;Lorena\u0026#39;, \u0026#39;age\u0026#39;: 56, \u0026#39;organization\u0026#39;: \u0026#39;Python Organization\u0026#39;, \u0026#39;position\u0026#39;: \u0026#39;Language Maker\u0026#39;, \u0026#39;language\u0026#39;: \u0026#39;python\u0026#39;, }, ] Filter the python programmers Goal: Filter only the python programmers from the DATAlist using list comprehensions\nMethod 1: Use list comprehensions def run(): all_python_devs = [worker[\u0026#39;name\u0026#39;] for worker in DATA if worker[\u0026#39;language\u0026#39;] == \u0026#39;python\u0026#39;] for worker in all_python_devs: print(worker) if __name__ == \u0026#39;__main__\u0026#39;: run() Filter all the adults (age \u0026gt; 18 year) Goal: Filter all the adults workers from the DATAlist using filter and print their names\nFilter is a high order function in Python : filter and map Use lambda functions Method 1: Use filter (high order function) Using the filter()function requires lambda worker: worker['age'] \u0026gt; 18 ,DATA to extract the adults workers. However, doing the following code we are extracting all the dictionary from DATA. Therefore we will require the map()function to select only the names of the adult workers.\ndef run(): adults = list(filter(lambda worker: worker[\u0026#39;age\u0026#39;] \u0026gt; 18 ,DATA)) for worker in adults: print(worker) if __name__ == \u0026#39;__main__\u0026#39;: run() Method 2: User filter() + map() (high order functions) To achieve the goal we need to pass the filter() and map() functions to extract first all the dictionaries with the adult workers and second to extract the names of the adult workers.\ndef run(): adults = list(filter(lambda worker: worker[\u0026#39;age\u0026#39;] \u0026gt; 18 ,DATA)) adults = list(map(lambda worker: worker[\u0026#39;name\u0026#39;], DATA)) for worker in adults: print(worker) if __name__ == \u0026#39;__main__\u0026#39;: run() Filter old people (age \u0026gt; 70 ) Goal:\nCreate a new dictionary old_people with workers (age \u0026gt; 70 ) , but include the \u0026lsquo;old\u0026rsquo;:True or \u0026lsquo;old\u0026rsquo;: False into each worker dictionary. Method 1: Use map() When we apply the map() function by filtering with worker['age'] \u0026gt; 70we will have a list()with True and False value. Thus, we need to create the new dictionary\ndef run(): old_people = (list(map(lambda worker: worker[\u0026#39;age\u0026#39;] \u0026gt; 70, DATA))) for worker in old_people: print(worker) if __name__ == \u0026#39;__main__\u0026#39;: run() Method 2: Use map() + sum of dictionaries To add a new entry to the dictionary we will use the | command\nNote: This feature only works with python \u0026gt; 3.9\ndef run(): old_people = list(map(lambda worker: worker | {\u0026#39;old\u0026#39; : worker[\u0026#39;age\u0026#39;] \u0026gt; 70 }, DATA)) for worker in old_people: print(worker) if __name__ == \u0026#39;__main__\u0026#39;: run() Extra: Look about high order functions in YouTube This is an extra step, don\u0026rsquo;t jump this pass. Every time you learn a new concept practice some examples but remember if you want to secure your learning. You must integrate it to you workflow. The high order functions will simplify your list tasks for filtering data.\nIf you love this content, you can share a Cup of Coffee ! Your help is essential to continue with this project\n","permalink":"https://jesuscapistran.github.io/post/2022-07-02/","summary":"July 02, 2022 Filter data in python with high order functions This project (Platzi) is to learn How to filter data from a list of dictionaries. The goal is to use the python high order functions filter() and map() to achieve the task. Note: You will require python \u0026gt; v3.9 to finish the 100% of the examples. However if you have only python 3 you can achieve the 90%. Don\u0026rsquo;t worry, let\u0026rsquo;s practice.","title":"Filter data in python with high order functions"},{"content":"Once I load the Hugo Sitein my local machine. I proceed to configure it and to deploy the Public folder into Github. For this task I do a google search and find the following video tutorial:\n","permalink":"https://jesuscapistran.github.io/post/hugo_tutorial/","summary":"Once I load the Hugo Sitein my local machine. I proceed to configure it and to deploy the Public folder into Github. For this task I do a google search and find the following video tutorial:","title":"Deploy HUGO Blog in Github Pages"},{"content":"In this space I have the intention to store my notes related to my coding journey. The challenge of implementing Python into my scientific career comes after getting my Ph.D. degree. At that moment, I saw that all the data I had generated related to materials characterization (thin-films) were buried in my hard drive. Therefore, to overcome the lost of data I have to learn new skills for data management. : While I was looking for alternatives. I found that having a coding culture will be a solution because in this XXI century, DATA is the most valuable resource I will have. With this hyphothesis in my mind, I decide to challentge myself by learning Python and Git as the initial point of my joruney.\nWhy do you decide to learn Python?\n","permalink":"https://jesuscapistran.github.io/post/welcome_code_notes/","summary":"In this space I have the intention to store my notes related to my coding journey. The challenge of implementing Python into my scientific career comes after getting my Ph.D. degree. At that moment, I saw that all the data I had generated related to materials characterization (thin-films) were buried in my hard drive. Therefore, to overcome the lost of data I have to learn new skills for data management. : While I was looking for alternatives.","title":"My coding notes"}]